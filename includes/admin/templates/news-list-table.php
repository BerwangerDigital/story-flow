<?php

namespace StoryFlow\Admin\Templates;

if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

use WP_List_Table;

/**
 * Class News_List_Table
 *
 * Handles the custom list table for managing AI-generated content for review.
 */
class News_List_Table extends WP_List_Table {

    private $table_data;
    private $table_name;
    private $wp_date_format;
    private $wp_time_format;

    private const ALLOWED_ORDERBY_COLUMNS = ['title', 'status', 'created_at', 'validated_at'];
    private const VALID_STATUSES = ['pending', 'approved', 'refused'];

    public function __construct() {
        global $wpdb;

        $this->table_name = $wpdb->prefix . 'sf_generated_content';
        $this->wp_date_format = get_option('date_format');
        $this->wp_time_format = get_option('time_format');

        parent::__construct([
            'singular' => 'sf_generated_news',
            'plural'   => 'sf_generated_news_list',
            'ajax'     => false,
        ]);

        $this->process_actions();
    }

    private function process_actions() {
        $action = sf_retrieve($_GET, 'action', '', 'sanitize_text_field');

        if ($action === 'delete') {
            $this->process_delete_action();
        } elseif ($action === 'change_status') {
            $this->process_change_status();
        }
    }

    private function process_delete_action() {
        if (empty($_GET['post']) || empty($_GET['nonce'])) {
            return;
        }

        $post_id = absint($_GET['post']);
        $nonce = $_GET['nonce'];

        if (!wp_verify_nonce($nonce, 'delete_generated_content_' . $post_id)) {
            wp_die(__('Invalid nonce. Action not allowed.', 'story-flow'));
        }

        global $wpdb;

        $deleted = $wpdb->delete(
            $this->table_name,
            ['id' => $post_id],
            ['%d']
        );

        if (false === $deleted) {
            wp_die(__('Failed to delete the item.', 'story-flow'));
        }

        add_action('admin_notices', function () {
            echo '<div id="message" class="notice notice-success is-dismissible"><p>' . esc_html__('Item deleted successfully.', 'story-flow') . '</p></div>';
        });
    }

    private function process_change_status() {
        if (empty($_GET['post']) || empty($_GET['status']) || empty($_GET['nonce'])) {
            return;
        }

        $post_id = absint($_GET['post']);
        $new_status = sanitize_text_field($_GET['status']);
        $nonce = $_GET['nonce'];

        if (!wp_verify_nonce($nonce, 'change_generated_content_status_' . $post_id)) {
            wp_die(__('Invalid nonce. Action not allowed.', 'story-flow'));
        }

        if (!in_array($new_status, self::VALID_STATUSES, true)) {
            wp_die(__('Invalid status value.', 'story-flow'));
        }

        global $wpdb;

        $updated = $wpdb->update(
            $this->table_name,
            ['status' => $new_status, 'validated_at' => current_time('mysql')],
            ['id' => $post_id],
            ['%s', '%s'],
            ['%d']
        );

        if (false === $updated) {
            wp_die(__('Failed to update the status.', 'story-flow'));
        }

        add_action('admin_notices', function () {
            echo '<div id="message" class="notice notice-success is-dismissible"><p>' . esc_html__('Status updated successfully.', 'story-flow') . '</p></div>';
        });
    }

    public function get_columns() {
        return [
            'title'         => __('Title', 'story-flow'),
            'status'        => __('Status', 'story-flow'),
            'created_at'    => __('Created At', 'story-flow'),
            'validated_at'  => __('Validated At', 'story-flow'),
            'generated_by'  => __('Generated By', 'story-flow'),
        ];
    }

    public function get_sortable_columns() {
        return [
            'title'         => ['title', true],
            'status'        => ['status', false],
            'created_at'    => ['created_at', true],
            'validated_at'  => ['validated_at', false],
        ];
    }

    private function get_table_data($per_page = 10, $current_page = 1, $orderby = 'created_at', $order = 'DESC') {
        global $wpdb;

        $status_filter = sf_retrieve($_GET, 'status', '', 'sanitize_text_field');
        $search = sf_retrieve($_POST, 's', '', 'sanitize_text_field');

        $orderby = in_array($orderby, self::ALLOWED_ORDERBY_COLUMNS) ? $orderby : 'created_at';
        $order = strtoupper($order) === 'DESC' ? 'DESC' : 'ASC';

        $query = "SELECT * FROM {$this->table_name} WHERE 1=1";

        if (!empty($status_filter)) {
            $query .= $wpdb->prepare(" AND status = %s", $status_filter);
        }

        if (!empty($search)) {
            $query .= $wpdb->prepare(" AND title LIKE %s", '%' . $wpdb->esc_like($search) . '%');
        }

        $offset = ($current_page - 1) * $per_page;
        $query .= " ORDER BY {$orderby} {$order}";
        $query .= $wpdb->prepare(" LIMIT %d OFFSET %d", $per_page, $offset);

        return $wpdb->get_results($query, ARRAY_A);
    }

    private function get_total_items() {
        global $wpdb;

        $status_filter = sf_retrieve($_GET, 'status', '', 'sanitize_text_field');
        $search = sf_retrieve($_POST, 's', '', 'sanitize_text_field');

        $query = "SELECT COUNT(*) FROM {$this->table_name} WHERE 1=1";

        if (!empty($status_filter)) {
            $query .= $wpdb->prepare(" AND status = %s", $status_filter);
        }

        if (!empty($search)) {
            $query .= $wpdb->prepare(" AND title LIKE %s", '%' . $wpdb->esc_like($search) . '%');
        }

        return (int) $wpdb->get_var($query);
    }

    public function prepare_items() {
        $per_page = $this->get_items_per_page('sf_generated_news_per_page', 10);
        $current_page = $this->get_pagenum();

        $orderby = sf_retrieve($_GET, 'orderby', 'created_at', 'sanitize_text_field');
        $order = sf_retrieve($_GET, 'order', 'desc', 'sanitize_text_field');

        $this->table_data = $this->get_table_data($per_page, $current_page, $orderby, $order);

        $columns = $this->get_columns();
        $hidden = [];
        $sortable = $this->get_sortable_columns();
        $this->_column_headers = [$columns, $hidden, $sortable];

        $total_items = $this->get_total_items();

        $this->set_pagination_args([
            'total_items' => $total_items,
            'per_page' => $per_page,
            'total_pages' => ceil($total_items / $per_page),
        ]);

        $this->items = $this->table_data;
    }

    public function column_title($item) {
        $output = '';

        if ($item['status'] === 'pending') {
            $view_link = admin_url('admin.php?page=story-flow-news&action=view&post=' . $item['id']);
            $output .= '<strong><a href="' . esc_url($view_link) . '">' . esc_html($item['title']) . '</a></strong>';
        } else {
            $output .= '<strong>' . esc_html($item['title']) . '</strong>';
        }

        $actions = [];

        if ($item['status'] === 'pending') {
            $approve_nonce = wp_create_nonce('change_generated_content_status_' . $item['id']);
            $approve_link = admin_url('admin.php?page=story-flow-news&action=change_status&post=' . $item['id'] . '&status=approved&nonce=' . $approve_nonce);
            $actions['approve'] = sprintf('<a href="%s">%s</a>', esc_url($approve_link), __('Approve', 'story-flow'));

            $refuse_nonce = wp_create_nonce('change_generated_content_status_' . $item['id']);
            $refuse_link = admin_url('admin.php?page=story-flow-news&action=change_status&post=' . $item['id'] . '&status=refused&nonce=' . $refuse_nonce);
            $actions['refuse'] = sprintf('<a href="%s">%s</a>', esc_url($refuse_link), __('Refuse', 'story-flow'));

            $delete_nonce = wp_create_nonce('delete_generated_content_' . $item['id']);
            $delete_link = admin_url('admin.php?page=story-flow-news&action=delete&post=' . $item['id'] . '&nonce=' . $delete_nonce);
            $actions['delete'] = sprintf('<a href="%s" class="delete">%s</a>', esc_url($delete_link), __('Delete', 'story-flow'));
        } elseif ($item['status'] === 'refused') {
            $reopen_nonce = wp_create_nonce('change_generated_content_status_' . $item['id']);
            $reopen_link = admin_url('admin.php?page=story-flow-news&action=change_status&post=' . $item['id'] . '&status=pending&nonce=' . $reopen_nonce);
            $actions['reopen'] = sprintf('<a href="%s">%s</a>', esc_url($reopen_link), __('Reopen', 'story-flow'));
        }

        if (!empty($actions)) {
            $row_actions = [];
            foreach ($actions as $action => $link) {
                $row_actions[] = sprintf('<span class="%s">%s</span>', esc_attr($action), $link);
            }
            $output .= '<div class="row-actions">' . implode(' | ', $row_actions) . '</div>';
        }

        return $output;
    }
}
